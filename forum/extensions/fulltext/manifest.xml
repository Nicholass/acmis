<?xml version="1.0" encoding="utf-8"?>

<extension engine="1.0">
  <id>fulltext</id>
  <title>MySQL Fulltext Search</title>
  <version>0.4</version>
  <description>This extension replaces the default internal search engine with a fulltext based one.</description>
  <author>FluxBB Development Team</author>
  <minversion>1.3 Beta</minversion>
  <maxtestedon>1.3 Beta</maxtestedon>

  <install><![CDATA[
	// If this is an update from a previous version of the extension, EXT_CUR_VERSION will contain the currently installed version number
	if ($db_type != 'mysql' && $db_type != 'mysqli')
		message('This extension requires MySQL');
	
	// Add fulltext indexes
	if (!$forum_db->index_exists('topics', 'subject_idx'))
			$forum_db->query('ALTER TABLE '.$forum_db->prefix.'topics ADD FULLTEXT '.$forum_db->prefix.'topics_subject_idx(subject)') or error(__FILE__, __LINE__);
	if (!$forum_db->index_exists('posts', 'message_idx'))
			$forum_db->query('ALTER TABLE '.$forum_db->prefix.'posts ADD FULLTEXT '.$forum_db->prefix.'posts_message_idx(message)') or error(__FILE__, __LINE__);
	
	// Empty search tables 
	$forum_db->query('TRUNCATE TABLE '.$forum_db->prefix.'search_cache') or error(__FILE__, __LINE__); 
	$forum_db->query('TRUNCATE TABLE '.$forum_db->prefix.'search_matches') or error(__FILE__, __LINE__); 
	$forum_db->query('TRUNCATE TABLE '.$forum_db->prefix.'search_words') or error(__FILE__, __LINE__); 
  ]]></install>

  <uninstall><![CDATA[
	if ($db_type != 'mysql' && $db_type != 'mysqli')
	{
		// This shouldn't happen but just in case
		exit;
	}

	// Drop fulltext indexes
	$forum_db->drop_index('topics', 'subject_idx');
	$forum_db->drop_index('posts', 'message_idx');

	// Here's how you display notices to the installing user after the uninstallation
	$notices[] = 'You will now need to rebuild the original search index, to do this go to Management and choose Rebuild index.';
  ]]></uninstall>

  <hooks>
    <hook id="sf_fn_create_search_cache_start"><![CDATA[
	global $query, $search_id, $url_type;
	
	$result = $forum_db->query('show variables like "ft_min_word_len"');
	$min_len = $forum_db->fetch_assoc($result);
	$min_len = $min_len['Value'];

	if (utf8_strlen($author) < 2)
		$author = '';

	if (utf8_strlen($keywords) < $min_len && strpos($keywords,'*') === false)
		$keywords = '';
		
	if (!$keywords && !$author)
		message($lang_search['No terms']);

	// Remove any apostrophes which aren't part of words
	$keywords = substr(preg_replace('((?<=\W)\'|\'(?=\W))', '', ' '.$keywords.' '), 1, -1);
	// Remove symbols and multiple whitespace

	$keywords = preg_replace('/[\^\$&\(\)<>`"\|,@_\?%~\+\[\]{}:=\/#\\\\;!\.\s]+/', ' ', $keywords);
		
	// Flood protection
	if (!$forum_user['is_guest'] && $forum_user['last_search'] != '' && (time() - $forum_user['last_search']) < $forum_user['g_search_flood'] && (time() - $forum_user['last_search']) >= 0)
		message(sprintf($lang_search['Search flood'], $forum_user['g_search_flood']));

	if (!$forum_user['is_guest'])
	{
		// Set the user's last_search time
		$query = array(
			'UPDATE'	=> 'users',
			'SET'		=> 'last_search='.time(),
			'WHERE'		=> 'id='.$forum_user['id'],
		);

		($hook = get_hook('sf_qr_update_last_search_time')) ? eval($hook) : null;
		$forum_db->query_build($query) or error(__FILE__, __LINE__);
	}

	// Are we limiting the results to a specific forum?
	if (!in_array(-1, $forum) || ($forum_config['o_search_all_forums'] == '0' && !$forum_user['is_admmod']))
		$forum_where = ' AND t.forum_id IN('.implode(',', $forum).')';
	else
		$forum_where = '';

	// Sort out how to order the results
	switch ($sort_by)
	{
		case 1:
			$sort_by_sql = ($show_as == 'topics') ? 'poster' : 'p.poster';
			break;

		case 2:
			$sort_by_sql = 'subject';
			break;

		case 3:
			$sort_by_sql = 'forum_id';
			break;

		case 4:
			if ($show_as == 'posts')
				$sort_by_sql = 'MATCH(p.message) AGAINST(\''.$forum_db->escape($keywords).'\')';
			else
				$sort_by_sql = 'total_relevance';
			break;

		default:
			$sort_by_sql = ($show_as == 'topics') ? 'posted' : 'p.posted';
			break;
	}

	// Generate the query to give us our results
		if ($show_as == 'posts')
		{
			$query = array(
				'SELECT'	=>	'p.id AS pid, p.poster AS pposter, p.posted AS pposted, p.poster_id, p.message, p.hide_smilies, t.id AS tid, t.poster, t.subject, t.first_post_id, t.posted, t.last_post, t.last_post_id, t.last_poster, t.num_replies, t.forum_id, f.forum_name',
				'FROM'		=>	'posts AS p',
				'JOINS'		=>	array(
					array(
						'LEFT JOIN'	=>	'topics AS t',
						'ON'		=>	't.id=p.topic_id',
					),
					array(
						'LEFT JOIN'	=>	'forums AS f',
						'ON'		=>	'f.id=t.forum_id',
					),
					array(
						'LEFT JOIN'	=>	'forum_perms AS fp',
						'ON'		=>	'fp.forum_id=f.id AND fp.group_id='.$forum_user['g_id'],
					),
				),
				'WHERE'		=>	'(fp.read_forum IS NULL OR fp.read_forum=1)'.($author ? 'AND p.poster LIKE \''.$forum_db->escape(str_replace('*', '%', $author)).'\'' : '').($keywords ? 'AND MATCH(p.message) AGAINST(\''.$forum_db->escape($keywords).'\' IN BOOLEAN MODE)' : '').$forum_where,
				'ORDER BY'	=>	$sort_by_sql.' '.$sort_dir,
			);
			
			($hook = get_hook('xn_fulltext_qr_get_cached_hits_as_posts')) ? eval($hook) : null;
		}
		else
		{
			$subquery1 = array(
				'SELECT'	=>	't.id AS tid, t.poster, t.subject, t.first_post_id, t.last_post, t.last_post_id, t.last_poster, t.num_replies, t.closed, t.sticky, t.forum_id, t.posted, f.forum_name, MATCH(t.subject) AGAINST(\''.$forum_db->escape($keywords).'\') AS relevance',
				'FROM'		=>	'topics AS t',
				'JOINS'		=>	array(
					array(
						'LEFT JOIN'	=>	'forums AS f',
						'ON'		=>	'f.id=t.forum_id',
					),
					array(
						'LEFT JOIN'	=>	'forum_perms AS fp',
						'ON'		=>	'fp.forum_id=f.id AND fp.group_id='.$forum_user['g_id'],
					),
				),
				'WHERE'		=>	'(fp.read_forum IS NULL OR fp.read_forum=1)'.($author ? 'AND t.poster LIKE \''.$forum_db->escape(str_replace('*', '%', $author)).'\'' : '').($keywords ? 'AND MATCH(t.subject) AGAINST(\''.$forum_db->escape($keywords).'\' IN BOOLEAN MODE)' : '').$forum_where,
			);
			
			$subquery2 = array(
				'SELECT'	=>	't.id AS tid, t.poster, t.subject, t.first_post_id, t.last_post, t.last_post_id, t.last_poster, t.num_replies, t.closed, t.sticky, t.forum_id, t.posted, f.forum_name, MATCH(p.message) AGAINST(\''.$forum_db->escape($keywords).'\') AS relevance',
				'FROM'		=>	'posts AS p',
				'JOINS'		=>	array(
					array(
						'INNER JOIN'	=>	'topics AS t',
						'ON'		=>	'p.topic_id = t.id',
					),
					array(
						'LEFT JOIN'	=>	'forums AS f',
						'ON'		=>	'f.id=t.forum_id',
					),
					array(
						'LEFT JOIN'	=>	'forum_perms AS fp',
						'ON'		=>	'fp.forum_id=f.id AND fp.group_id='.$forum_user['g_id'],
					),
				),
				'WHERE'		=>	'(fp.read_forum IS NULL OR fp.read_forum=1)'.($author ? 'AND p.poster LIKE \''.$forum_db->escape(str_replace('*', '%', $author)).'\'' : '').($keywords ? 'AND MATCH(p.message) AGAINST(\''.$forum_db->escape($keywords).'\' IN BOOLEAN MODE)' : '').$forum_where,	
			);
			
			($hook = get_hook('xn_fulltext_subqr_get_cached_hits_as_topics')) ? eval($hook) : null;
			
			$search_from_string = '';
			
			switch ($search_in) {
				case -1: //topic
					$search_from_string = '('.$forum_db->query_build($subquery1, true).') as tmp';
				break;
				case 1: //post
					$search_from_string = '('.$forum_db->query_build($subquery2, true).') as tmp';
				break;
				case 0://all
				default:
					$search_from_string = '('.$forum_db->query_build($subquery1, true).' UNION '.$forum_db->query_build($subquery2, true).') AS tmp';
				break;
			}
			
			$query = array(
				'SELECT'	=>	'*, SUM(relevance) AS total_relevance',
				'FROM'		=>	$search_from_string,
				'GROUP BY'	=>	'tid',
				'ORDER BY'	=>	$sort_by_sql.' '.$sort_dir,
			);

			($hook = get_hook('xn_fulltext_qr_get_cached_hits_as_topics')) ? eval($hook) : null;
		}

	$url_type = $forum_url['search_resultft'];

	if (is_array($forum)) {
		$forum = implode('&forum[]=', $forum);
	}
	
	$search_id = array(rawurlencode($keywords), $forum, rawurlencode($author), ($search_in == 0 ) ? 'all' : (($search_in == 1) ? 'message' : 'topic'), $sort_by, $sort_dir, $show_as);
	
	return true;
    ]]></hook>
    <hook id="si_fn_update_search_index_start"><![CDATA[
		return true;
	]]></hook>
    <hook id="si_fn_strip_search_index_start"><![CDATA[
		return true;
	]]></hook>
	<hook id="se_pre_header_load"><![CDATA[
	// Include fulltext language
	if (file_exists($ext_info['path'].'/lang/'.$forum_user['language'].'.php'))
		require $ext_info['path'].'/lang/'.$forum_user['language'].'.php';
	else
		require $ext_info['path'].'/lang/English.php';

	$forum_page['frm-sort'][4] = '<option value="4" selected="selected">'.$lang_fulltext['Sort by relevance'].'</option>';
	$forum_page['frm-info']['refine'] = '<li><span>'.$lang_fulltext['Refine info fulltext'].'</span></li>';
	$forum_page['frm-info']['wildcard'] = '<li><span>'.$lang_fulltext['Wildcard info fulltext'].'<span></li>';
	]]></hook>
    <hook id="ca_fn_generate_admin_menu_new_sublink"><![CDATA[
    // Remove option to rebuild search index while using fulltext search
    if(isset($adnav_sublinks['reindex']))
		unset($adnav_sublinks['reindex']);
    ]]></hook>
  </hooks>
</extension>
