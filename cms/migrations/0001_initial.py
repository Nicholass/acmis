# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-12-06 08:52
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0002_auto_20150616_2121'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.CharField(choices=[('0', 'Файлы'), ('1', 'Посты'), ('3', 'Не определено')], default='3', help_text='<font color="red">Внимание! Изменение этого поля у существующих категорий может повлиять на отображение объектов!</font>', max_length=254, verbose_name='Тип объектов')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('route', models.CharField(max_length=200, verbose_name='Название в URL')),
                ('allow_anonymous', models.BooleanField(default=True, verbose_name='Разрешить просмотр не зарегистрированным')),
                ('groups', models.ManyToManyField(blank=True, to='auth.Group', verbose_name='Группы имеющие доступ')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=600, verbose_name='Текст')),
                ('is_moderated', models.BooleanField(default=True, verbose_name='Одобрен')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Удален')),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, unique=True, verbose_name='Дата создания')),
                ('modifed_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата редактирования')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='cms.Comment', verbose_name='Ответ на')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
                'permissions': (('comment_moderate', 'Модерация комментариев'),),
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('published_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата публикации')),
                ('is_public', models.BooleanField(default=True, verbose_name='Опубликован')),
                ('is_moderated', models.BooleanField(default=True, verbose_name='Одобрен')),
            ],
            options={
                'verbose_name': 'Пост',
                'verbose_name_plural': 'Посты',
                'permissions': (('post_moderate', 'Модерация постов'),),
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='Аватар')),
                ('birth_date', models.CharField(blank=True, max_length=80, null=True, verbose_name='Дата рождения')),
                ('location', models.CharField(blank=True, max_length=80, null=True, verbose_name='Местонахождение')),
                ('site', models.CharField(blank=True, max_length=80, null=True, verbose_name='Вебсайт')),
                ('facebook', models.CharField(blank=True, max_length=80, null=True, verbose_name='Facebook')),
                ('vk', models.CharField(blank=True, max_length=80, null=True, verbose_name='Vkontakte')),
                ('instagram', models.CharField(blank=True, max_length=80, null=True, verbose_name='Instagram')),
                ('twitter', models.CharField(blank=True, max_length=80, null=True, verbose_name='Twitter')),
                ('youtube', models.CharField(blank=True, max_length=80, null=True, verbose_name='YouTube')),
                ('jabber', models.CharField(blank=True, max_length=80, null=True, verbose_name='Jabber')),
                ('telegram', models.CharField(blank=True, max_length=80, null=True, verbose_name='Telegram')),
                ('skype', models.CharField(blank=True, max_length=80, null=True, verbose_name='Skype')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Профиль',
                'verbose_name_plural': 'Профили',
                'permissions': (('profile_moderate', 'Модерация профилей'),),
            },
        ),
        migrations.CreateModel(
            name='BinaryPost',
            fields=[
                ('post_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.Post')),
                ('file', models.ImageField(blank=True, null=True, upload_to='uploads/%Y/%m/%d/', verbose_name='Файл')),
                ('description', models.TextField(max_length=200, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Изображение',
                'verbose_name_plural': 'Изображения',
            },
            bases=('cms.post',),
        ),
        migrations.CreateModel(
            name='TextPost',
            fields=[
                ('post_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='cms.Post')),
                ('text', models.TextField(verbose_name='Текст')),
            ],
            options={
                'verbose_name': 'Текстовый пост',
                'verbose_name_plural': 'Текстовые посты',
            },
            bases=('cms.post',),
        ),
        migrations.AddField(
            model_name='post',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор'),
        ),
        migrations.AddField(
            model_name='post',
            name='category',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='cms.Category', verbose_name='Категория'),
        ),
        migrations.AddField(
            model_name='post',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_cms.post_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='post',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Теги'),
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cms.Post', verbose_name='Пост'),
        ),
    ]
